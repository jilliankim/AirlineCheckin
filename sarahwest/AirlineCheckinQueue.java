package sarahwest;

import java.util.NoSuchElementException;



/* Developed by Sarah I West for NJIT CS610 Fall 2014
 * 
 * Assignment:
 * Build an implementation of a queue ADT. Use this implementation to build a simulation of 
 * waiting queues at an airline check-in counter, organized as follows:
 * 	-There are two types of passengers: first class and coach.									x
 * 	-There are two service stations for first class, and three for coach.
 * 	-There is a single queue for each type of passenger (first class, coach). 					x
 * 	-Passenger arrival times are random and are generated by a random number generator.			x
 * 	-Average arrival rates for passengers are R1 for first class and R2 for coach. These are 
 * 	 decided at run-time by prompting the user.
 * 	-Service time is random and varies uniformly between 1 and S1 for first class, and 
 * 	 between 1 and S2 for coach. Parameters S1 and S2 are also determined at run-time, by 
 * 	 prompting the user.
 * 	-Whenever a service station is available and the corresponding queue is not empty, we pick 
 * 	 the passenger at the front of the queue and place her/him on the service station.
 * 	-Whenever a first class service station is available and the first class queue is empty, 
 * 	 the service station may service a passenger from coach.
 * 	-The duration of the experiment, in minutes, is decided by the user at run time.
 * 	-Statistics generated by the simulation include: average service time, maximum service time, 
 * 	 number served in each class, maximum queue length for each type of passenger. 
 * 
 * */


public class AirlineCheckinQueue implements Queue {
	
	private Object[] array;
    private int size = 0;						// default queue size is empty
    private int head = 0; 						// index of the current front item, if one exists
    private int tail = 0; 						// index of next item to be added
    private int maxLength = 0;					// maximum queue length
    private int numPeopleServed = 0;			// number people served in each class
    private long previousArrivalTime = 0;		// time at which the last passenger was added to queue
    private long nextArrivalTime = 0;			// time at which the next passenger will be added to queue
    private int averageArrivalRate = 1;			//
    
    Clock clock = null;
	
	public AirlineCheckinQueue(int capacity, Clock clock) {
        array = new Object[capacity];
        this.clock = clock;
    }
	
	public void enqueue(Object item) {
        if (size == array.length) {
            throw new IllegalStateException("Cannot add to full queue");			//TODO handle array overflow exception
        }
        array[tail] = item;
        previousArrivalTime = clock.getCurrentTime();		// time we added the current passenger
        nextArrivalTime = previousArrivalTime + randomArrivalInterval();
        tail = (tail + 1) % array.length;
        size++;
        
        if (size > maxLength) {
        	maxLength = size;
        }
     }
	
	public Object dequeue() {
        if (size == 0) {
            throw new NoSuchElementException("Cannot remove from empty queue");
        }
        Object item = array[head];
        array[head] = null;
        head = (head + 1) % array.length;
        size--;
        numPeopleServed ++;					// someone is served if they enter the line AND leave the line
        return item;
    }
	
	public Object peek() {
        if (size == 0) {
            throw new NoSuchElementException("Cannot peek into empty queue");
        }
        return array[size - 1];
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public int size() {
        return size;
    }
    
    public int maxLength() {
    	return maxLength;
    }
    
    public int numPeopleServed() {
    	return numPeopleServed;			
    }
    
    public void setArrivalRate(int s) {
    	averageArrivalRate = s;
    }
    
    public long getNextArrivalTime() {
    	
    	return nextArrivalTime;
    }
    
    private int randomArrivalInterval() {
    	float f = (float) Math.random()*2*averageArrivalRate;
    	return Math.round(f);
    }
}




interface Queue {
	
	void  enqueue(Object x);			// Adds the given item to the rear of the queue.
	Object dequeue() throws Exception;	// Removes the front item from the queue and returns it.
	Object peek();						// Returns the front item from the queue without removing it.
	int size();							// Returns the number of items currently in the queue.
	boolean isEmpty();					// Returns whether the queue is empty or not.
//	void makeEmpty();					// Removes all items from the queue.
	
}

